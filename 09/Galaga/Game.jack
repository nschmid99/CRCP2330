class Game{

	field Spaceship spaceship; // the spaceship
	//field Aliens alien; //the aliens
  field Array aliens;
  field AlienBullet ab;
	field int aPos; //alien position
  field int bPosX;
  field int bPosY;
  field  int x, x2;
  field int length;
  field int  y,y2;
  field int go;
  field int abX;
  field int abx;
  field int moving;
  field int lives;
  field int kill;
  field int score;
  field int stro;
  field int xAB;
  field int yAB;
  field int gmOvr;
  //field int ince;
  field int bulletDone;
field int d;

  
   field int direction; // the spaceships's current direction: 
                        // 0=none, 3=left, 4=right, 1=up(bullet)

   /** Constructs a new  Game. */
   constructor Game new() {
      let aliens=Array.new(10);
      do initAliens();  
        let xAB=200;
      let yAB=20;
      let ab=AlienBullet.new(xAB,yAB,5);
      let spaceship = Spaceship.new(200, 200, 10);
      let direction = 0;  // initial state is no movement
      let go=0;
      let d=0;
      let abx=200;
      let lives=3;
      let score=0;
      let kill=0;
      let bulletDone=0;
      let stro=0;
      let  gmOvr=0;
    
    //  let ince=0;
      //let abullet=0;
      return this;
   }

method void recrLives(){
var String liveC;
  do Output.printString("LIVES:"); do Output.printInt(lives);

return;
}

method void scLiv(){

 
  return;
}

 method void initAliens(){ //sets up aliens in row  across the screen
  var Aliens a;
  var int i;
  let x=116;  //starting point x
  let y= 20;  //starting point y
  let i=0;
 
 while(i<10){
  let a=Aliens.new(x,y,10);
  let aliens[i]=a;
  let x=x+26.4; //distance between each alien
  let i=i+1;
 }
 return;
 }

  method void bulletPosCheck(){
 let bPosX=spaceship.bulletposx();
 let bPosY=spaceship.bulletposy();
 return;
 }

method void shoot(){
if( (~(isshot())) & (moving=0) ){
do spaceship.shootBullet();
do spaceship.draw();
}
  return;
}

method void alienbulletPC(){
  let abX=ab.getX();
  return;
}

method void abTooFar(){
   if(ab.getY()>200){
  do ab.getY();
  do ab.erase();
  do ab.reset(xAB,yAB);
   let xAB=xAB+40;
   let yAB=20;
    if(xAB=400){
   let xAB=40;
   }

}
return;
}

method void bulletGo(){
var int spHit;
var int wait;
var int w;
var int ince;
let ince=0;
let w=0;

//do Output.printInt(kill);

do alienbulletPC();

if(ab.getY()<210){
  do ab.fire();
let kill=0;
  } 

 

if ( (ab.getY()>spaceship.spaceshipY()) & (ab.getX()>(spaceship.spaceshipX()-5) ) & (ab.getX()<(spaceship.spaceshipX()+11)) ) {
 //do ab.erase();
 //do ab.reset(xAB,yAB);
  //let xAB=xAB+40;
  //let yAB=20;
   let lives=lives-1;
  // if(xAB=400){
  // let xAB=40;
 // }
 do Output.backSpace();
  do Output.printInt(lives);

  if(lives=0){
  let gmOvr=1;
}

}


return;

}



method boolean isshot(){    //makes  sure bullet can only be shot when other one is gone
var boolean issht;
let issht=false;
  if(spaceship.shootBullet()){

 let issht=true; 
    return true;
 }else{
    return false;
 }
}

method void bulletToFar(){
do bulletPosCheck();
//do Output.printInt(bPosY);
  if ((bPosY<20)){
   do spaceship.eraseBullet();
   do spaceship.rstBullet();
    let go=0;
  }
  return;
}


 method void sortArray(){
var int s;
var Aliens atemp;
var Aliens alientodie;
var int alienY;
 var  int  alienX;


let d=0;
let s=0;
while(s<10){ //go through array
  let atemp=aliens[s];  //get array 
  let alienY=atemp.getY(); //gety
  let alienX=atemp.getX();  //getx


 do bulletPosCheck();// check bulletpos

  if  (  (bPosY<20) ){
  //& (bPosY>alienY) ){

  if( (bPosX>alienX)  & (bPosX<(alienX+15))  ){ //is by above ay
    let d=1;      //let  d=1;
    //do Output.printInt(d);


    //let score=score+5;
    let atemp=aliens[s];
    do atemp.dispose();
    let go=0;
}

 }

   

 let s=s+1;}
 return;

 }


  method void dispose() {
      do spaceship.dispose();
      do aliens.dispose();
      do Memory.deAlloc(this);
      return;
   }

method void moveAlien(){
  var Aliens al;
  var Aliens temp;
  var int aRight, aLeft;
  var int j;
  var int d;
  var int died;
  var int collide;
  var Aliens alienRightmost, alienrx;
  var  Aliens alienLeftmost, alienlx;

let j=0;
let collide=0;
let aRight=0;
let aLeft=0;

do Sys.wait(8);

while((j<10)&~collide){  //have to find the leftmost alien for colision  detection
  let temp=aliens[j];
  let died=temp.deadAlien();  //alien might have been shot and "died" so have to check
  if (died=0){
  let alienLeftmost=temp;   
  let collide=1;
  }
  let j=j+1;    //if alien did die check next alien
}

let j=9;
let collide=0;
while((j>-1)&~collide){   //does same thing for rightmost alien
  let temp=aliens[j];
  let died=temp.deadAlien();
  if (died=0){
  let alienRightmost=temp;
  let collide=1;
  }
  let j=j-1;
}

let alienrx=alienRightmost.getX();    //sets rightmost alienX pos to a variable
let alienlx=alienLeftmost.getX();   //sets leftmost alienX pos to a variable
let d=alienRightmost.getDir();      //doesnt matter if using L or R

if(alienrx>490){    //right boundary
  let aRight=1;
}
if(alienlx<10){    //left boundary
  let aLeft=1;
}

if(d=0){    //0 goes right
  if(aRight=0){
    let j=0;
      while(j<10){
      let al=aliens[j];
      do al.moveRight();
      let j=j+1;
        }
    }
  else{     //change direction
    if(aRight=1){
    let j=0;
      while(j<10){
      let al=aliens[j];
      do al.moveLeft();
      do al.chngDirection();    //changes d from 0 to 1
      let j=j+1;
          }
      }
    }
  }
    
if(d=1){      //1 goes left
  if(aLeft=0){
  let j=0;
    while(j<10){
    let al=aliens[j];
    do al.moveLeft();
   let j=j+1;
      }
    }
  else{    //change direction
    if(aLeft=1){
    let j=0;
      while(j<10){
      let al=aliens[j];
      do al.moveRight();
      do al.chngDirection();
      let j=j+1;
        }
      }
    }

  }
  return;
}

   method void moveSpaceship() {
   var int k;
      if (direction = 3) { do spaceship.moveLeft(); 
      let moving=1;}
      if (direction = 4) { do spaceship.moveRight(); let moving=1;}
      if (direction = 0) { do spaceship.stopMoving(); let moving=0;}
      do Sys.wait(10);  // delays the next movement
  
      return;
   }
//need to make  it so spaceship can not move until bullet is done shooting
   


     method void run() {
      var char key;  // the key currently pressed by the user
      var int time;
      var int timemod;
      var int i;
      var boolean exit;
      let exit = false;

//do  spaceship.initBullet();
       do Output.printString("SCORE:"); do Output.printInt(score);
  do Output.println();

do Output.printString("LIVES:"); do Output.printInt(lives);


      while (~exit) {
        let time=time+1;
       // do recrLives();
 

         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
           
            if((go=1) &(moving=0)){
            do shoot();
            }
            
            if(go=0){
          do moveSpaceship();
      
          }
          do bulletGo();
            do  abTooFar();
            do moveAlien();
              
           
              do bulletPosCheck();
          
 do sortArray();
  do bulletToFar();

             if(gmOvr=1){
 let key=1;
  }
            
         }


//if  bullet isnt too far (is still shooting)can not  shoot new bullet
        if(key=1){
        
  do Screen.clearScreen();
  do Output.printString("GAME OVER");
        }

         if (key = 81)  { let exit = true; }     // q key
         if (key = 130) { let direction = 3; }   // left arrow to move
         if (key = 132) { let direction = 4; }   // right arrow to move
          if (key = 131) { let direction = 0;}  //stop moving to aim

         if (key = 32 ) { let go=1;}     //spacebar to shoot

         // waits for the key to be released
         while (~(key = 0)) {
         let time=time+1;
        // do recrLives();
            let key = Keyboard.keyPressed();

            
            if((go=1) &  (moving=0)){         
            do shoot();
            }

            if(go=0){
            do moveSpaceship();
            }
            do bulletGo();
            do  abTooFar();
           
              do moveAlien();

           
             do bulletPosCheck();
                   do sortArray();
                   do bulletToFar();


         }
     } 

    

     return;
   }



}